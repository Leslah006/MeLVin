{"title":"Scatterplot","description":"Plots each pair of values from two variables as points in a cartesian coordinate space.","className":"Scatterplot","allowOutConn":true,"allowInConn":true,"outConnections":[{"type":"OPTION_CONNECTION","name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"DATA_CONNECTION","unique":true,"name":"Filtered data","index":0},{"type":"SELECTION_CONNECTION","unique":true,"name":"Range and point selection","index":0}],"inConnections":[{"type":"OPTION_CONNECTION","unique":true,"name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"DATA_CONNECTION","unique":true,"index":0,"name":"Tabular data"},{"type":"SELECTION_CONNECTION","unique":false,"name":"Data selections","index":0},{"type":"COLOR_CONNECTION","unique":false,"name":"Data groups","index":0}],"shareSelection":false,"shareData":true,"category":"viz","selectedLibs":["plotly-latest.min.js"],"previewDataFile":"","selectedPreview":"scatterPlot.svg","methods":{"init":{"code":"var self = this;\nPlotly.purge(container);\n$(container).html(\"\");\nconsole.log(\"here\");\nthis.setProperty = setProperty;\nvar vizOptions = {\n  scrollZoom: true,\n  showLink: false,\n  modeBarButtonsToRemove: ['sendDataToCloud'],\n  displaylogo: false,\n  displayModeBar: true\n};\n\nvar xAttr = state.options[0].value;\nvar yAttr = state.options[1].value;\nvar showAttr = state.options[2].value;\n\nthis.xAttr = xAttr;\nthis.yAttr = yAttr;\n\nvar attributes = Object.keys(input.data.schema.attributes);\n\nvar incorrectCols = attributes.indexOf(xAttr) === -1 || attributes.indexOf(yAttr) === -1 || attributes.indexOf(showAttr) === -1;\n\nif (input.data.data.length > 0 && !incorrectCols) {\n\n  this.pointsIds = input.data.data.map(function (data) {\n    return data[0];\n  });\n\n\n  var baseTrace = {\n    x: [],\n    y: [],\n    mode: 'markers',\n    name: \"not selected\",\n    type: 'scatter',\n    ids: [],\n    text: [],\n    marker: {\n      color: \"#000000\"\n    }\n  };\n  input.groups = input.groups || [];\n  input.groups = [].concat.apply([], input.groups);\n  input.groups = input.groups.filter(function (group) {\n    return group !== undefined;\n  });\n\n  var traces = [baseTrace].concat(input.groups.map(function (group) {\n    return {\n      x: [],\n      y: [],\n      mode: 'markers',\n      name: group.name,\n      type: 'scattergl',\n      ids: [],\n      text: [],\n      marker: {\n        color: group.color\n      }\n    };\n  }));\n  var xIndex = attributes.indexOf(xAttr);\n  var yIndex = attributes.indexOf(yAttr);\n  var showAttr = attributes.indexOf(showAttr);\n  var i = 0;\n  input.data.data.forEach(function (data) {\n    var traceNum = 0;\n    for (i = 0; i < input.groups.length; i++) {\n      if (input.groups[i].points && input.groups[i].points[data[0]]) {\n        traceNum = i + 1;\n      }\n    }\n    traces[traceNum].x.push(data[xIndex]);\n    traces[traceNum].y.push(data[yIndex]);\n    traces[traceNum].text.push(data[showAttr]);\n    traces[traceNum].ids.push(data[0]);\n  });\n\n\n  var layout = {\n    margin: {\n      l: 100,\n      r: 100,\n      b: 100,\n      t: 100,\n      pad: 5\n    },\n    autosize: true,\n    dragmode: \"pan\",\n    title: state.options[2].selectedValue,\n    xaxis: {\n      title: xAttr,\n    },\n    yaxis: {\n      title: yAttr,\n    }\n  };\n  this.trace = traces;\n  Plotly.react(container, this.trace, layout, vizOptions);\n  $(container)[0].on('plotly_selected', self.onSelection(container, input, state, dataHandler, setProperty));\n} else {\n  var message = \"\";\n  if (input.data.data.length === 0)\n    message = 'No data provieded';\n  else\n    message = 'Specified column names not found in the provided data';\n\n  $(container).html('<div style=\"height:100%;display:flex;flex-flow: column;justify-content:center;align-items:center;\">' +\n      '<div class=\"alert alert-info\" role=\"alert\">' + message +\n      '</div>' +\n      '</div>');\n}","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false},"update":{"code":"this.init(container, input, state, dataHandler, setProperty);","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false},"onSelection":{"code":"let self = this;\nreturn function (event) {\n  if (event) {\n    let range = Object.assign({}, event.range);\n    let selections = [{\n      type: \"range\",\n      range: range.x,\n      name: self.xAttr\n    }, {\n      type: \"range\",\n      range: range.y,\n      name: self.yAttr\n    }, {\n      type: \"points\",\n      points: {}\n    }\n    ];\n\n    event.points.forEach(function (point) {\n      selections[2].points[point.id] = true;\n\n    });\n\n    let selectedPointsIDs = event.points.map(function (point) {\n      return point.id;\n    });\n    dataHandler.removeChanges();\n    self.pointsIds.filter(function (pointID) {\n      return selectedPointsIDs.indexOf(pointID) === -1;\n    }).forEach(function (pointID) {\n      dataHandler.removeRow(pointID, false)\n    });\n\n\n    dataHandler.saveChanges();\n    setProperty(\"selection\", selections);\n  } else {\n    dataHandler.removeChanges();\n    setProperty(\"selection\", []);\n    dataHandler.saveChanges();\n  }\n};","args":"container, input, state, dataHandler, setProperty","isRemovable":true,"hasCustomArgs":true,"canBeRenamed":true}},"options":[{"type":"INPUT","label":"Horizontal axis","placeholder":"Column name"},{"type":"INPUT","label":"Vertical axis","placeholder":"Column name"},{"type":"INPUT","label":"Shown label","placeholder":"Column name"}],"thumbnail":"./auth/previews/scatterPlot.svg","preview":"scatterPlot.svg","id":"Scatterplot","loadPreview":true,"hasOptions":true}