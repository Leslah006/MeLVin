{"title":"Network","description":"Displays a set of nodes and the corresponding weighted connections between them.","className":"Network","allowOutConn":true,"allowInConn":true,"outConnections":[{"type":"OPTION_CONNECTION","name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"propSelection","unique":true,"name":"Selected nodes","index":0}],"inConnections":[{"type":"OPTION_CONNECTION","unique":true,"name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"DATA_CONNECTION","unique":true,"index":0,"name":"Nodes"},{"type":"DATA_CONNECTION","unique":true,"name":"Edges","index":1}],"shareSelection":false,"shareData":true,"category":"viz","selectedLibs":["vivagraph.min.js"],"previewDataFile":"","selectedPreview":"network.svg","methods":{"init":{"code":"this.play = true;\nthis.propSelection = [];\nvar self = this;\nconsole.log(\"Network\");\n$(container).css(\"cursor\", \"move\");\n$(container).html(\n    '<div class=\"graph-container w-100 h-100 position-absolute\" style=\"margin: 0; overflow: hidden\"></div>' +\n    '<div class=\"graph-overlay w-100 h-100 position-absolute\" style=\"display: none; left: 0; top: 0;\">' +\n    '<div class=\"graph-selection-indicator position-absolute\" style=\"background: transparent; border: 1px solid orange\"></div>' +\n    '</div>' +\n    '<div class=\"graph-controls position-absolute\" style=\"top: 5px; right: 5px; margin: 5px; display: flex;\">' +\n    ' <div class=\"mr-3\" style=\"background-color: #cfd7db; border-radius: 3px;     border: 1px solid #b5b5b5;\">' +\n    '  <i class=\"fa fa-pause p-2 net-step-btn\" style=\"cursor: pointer; border-radius: 3px; color: #000000;\"/>' +\n    ' </div>' +\n    ' <div class=\"mr-3\" style=\"background-color: #cfd7db; border-radius: 3px;     border: 1px solid #b5b5b5;\">' +\n    '  <i class=\"fa fa-arrows-alt p-2 net-move-btn\" style=\"cursor: pointer; border-radius: 3px; background-color: #2196F3; color: white;\"/>' +\n    ' <i class=\"fa fa-object-group p-2 net-select-btn\"  style=\"cursor: pointer; border-radius: 3px;\"/>' +\n    ' </div>' +\n    ' <div style=\"background-color: #cfd7db; border-radius: 3px; border: 1px solid #b5b5b5;\">' +\n    '  <i class=\"fa fa-search-plus p-2 net-zoomin-btn\"  style=\"cursor: pointer; border-radius: 3px; color: #000000;\"/>' +\n    '  <i class=\"fa fa-search-minus p-2 net-zoomout-btn\"  style=\"cursor: pointer; border-radius: 3px; color: #000000;\"/>' +\n    ' </div>' +\n    '</div>' +\n    '</div>'\n);\nvar graph = Viva.Graph.graph();\ninput.data.data[0].forEach(function (data) {\n    graph.addNode(data[1]);\n});\n\ninput.data.data[1].forEach(function (data) {\n    graph.addLink(data[1], data[2], {connectionStrength: data[3]});\n});\n\nvar layout = Viva.Graph.Layout.forceDirected(graph, {\n    springLength: 200,\n    springCoeff: 0.00001,\n    dragCoeff: 0.1,\n    gravity: -20,\n    stableThreshold: 1,\n    springTransform: function (link, spring) {\n        spring.length = 200 * link.data.connectionStrength;\n    }\n});\n\nvar graphics = Viva.Graph.View.webglGraphics();\n\ngraphics\n    .node(function (node) {\n        return Viva.Graph.View.webglSquare(40, \"#3665bf\");\n    })\n\nvar renderer = Viva.Graph.View.renderer(graph, {\n    layout: layout,\n    graphics: graphics,\n    container: $(container).find('.graph-container')[0]\n});\nvar multiSelectOverlay;\n\nrenderer.run();\n\n$(container).find('.net-step-btn').on('click', function () {\n    if (self.play) {\n        $(container).find('.net-step-btn').removeClass('fa-pause').addClass('fa-play');\n        renderer.pause();\n        self.play = false;\n    } else {\n        $(container).find('.net-step-btn').removeClass('fa-play').addClass('fa-pause');\n        renderer.resume();\n        self.play = true;\n    }\n});\n\n$(container).find('.net-zoomin-btn').on('click', function () {\n    renderer.zoomIn();\n});\n\n$(container).find('.net-zoomout-btn').on('click', function () {\n    renderer.zoomOut();\n});\n\n$(container).find('.net-select-btn').on('click', function () {\n    $(this).css('background-color', '#2196F3').css('color', 'white');\n    $(container).find('.net-move-btn').css('background-color', 'transparent').css('color', 'black');\n    $(container).css(\"cursor\", \"crosshair\");\n    multiSelectOverlay = startMultiSelect(container, graph, renderer, layout);\n});\n\n$(container).find('.net-move-btn').on('click', function () {\n    $(this).css('background-color', '#2196F3').css('color', 'white');\n    $(container).find('.net-select-btn').css('background-color', 'transparent').css('color', 'black');\n    $(container).css(\"cursor\", \"move\");\n    multiSelectOverlay.destroy();\n    multiSelectOverlay = null;\n});\n\nfunction startMultiSelect(container, graph, renderer, layout) {\n    var graphics = renderer.getGraphics();\n    var domOverlay = container.querySelector('.graph-overlay');\n    var overlay = createOverlay(domOverlay, container);\n    overlay.onAreaSelected(handleAreaSelected);\n\n    return overlay;\n\n    function handleAreaSelected(area) {\n        // For the sake of this demo we are using silly O(n) implementation.\n        // Could be improved with spatial indexing if required.\n        var topLeft = graphics.transformClientToGraphCoordinates({\n            x: area.x,\n            y: area.y\n        });\n\n        var bottomRight = graphics.transformClientToGraphCoordinates({\n            x: area.x + area.width,\n            y: area.y + area.height\n        });\n        self.propSelection = [];\n        graph.forEachNode(higlightIfInside);\n        renderer.rerender();\n\n        return;\n\n        function higlightIfInside(node) {\n            var nodeUI = graphics.getNodeUI(node.id);\n            if (isInside(node.id, topLeft, bottomRight)) {\n                nodeUI.color = 0xff2d0fff;\n                nodeUI.size = 40;\n                self.propSelection.push(node.id);\n            } else {\n                nodeUI.color = 0x3665bfff;\n                nodeUI.size = 40;\n            }\n        }\n\n        function isInside(nodeId, topLeft, bottomRight) {\n            var nodePos = layout.getNodePosition(nodeId);\n            return (topLeft.x < nodePos.x && nodePos.x < bottomRight.x &&\n                topLeft.y < nodePos.y && nodePos.y < bottomRight.y);\n        }\n    }\n}\n\nfunction createOverlay(overlayDom, container) {\n    var selectionClasName = 'graph-selection-indicator';\n    var selectionIndicator = overlayDom.querySelector('.' + selectionClasName);\n    if (!selectionIndicator) {\n        selectionIndicator = document.createElement('div');\n        selectionIndicator.className = selectionClasName;\n        overlayDom.appendChild(selectionIndicator);\n    }\n\n    var notify = [];\n    var dragndrop = Viva.Graph.Utils.dragndrop(overlayDom);\n    var selectedArea = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n    };\n    var startX = 0;\n    var startY = 0;\n\n    dragndrop.onStart(function (e) {\n        startX = selectedArea.x = e.offsetX;\n        startY = selectedArea.y = e.offsetY;\n        selectedArea.width = selectedArea.height = 0;\n\n        updateSelectedAreaIndicator();\n        selectionIndicator.style.display = 'block';\n    });\n\n    dragndrop.onDrag(function (e) {\n        recalculateSelectedArea(e);\n        updateSelectedAreaIndicator();\n        notifyAreaSelected();\n    });\n\n    dragndrop.onStop(function () {\n        selectionIndicator.style.display = 'none';\n        setProperty(\"propSelection\", self.propSelection);\n        console.log(self.propSelection)\n    });\n\n    overlayDom.style.display = 'block';\n\n    return {\n        onAreaSelected: function (cb) {\n            notify.push(cb);\n        },\n        destroy: function () {\n            overlayDom.style.display = 'none';\n            dragndrop.release();\n        }\n    };\n\n    function notifyAreaSelected() {\n        notify.forEach(function (cb) {\n            cb(selectedArea);\n        });\n    }\n\n    function recalculateSelectedArea(e) {\n        selectedArea.width = Math.abs(e.offsetX - startX);\n        selectedArea.height = Math.abs(e.offsetY - startY);\n        selectedArea.x = Math.min(e.offsetX, startX);\n        selectedArea.y = Math.min(e.offsetY, startY);\n    }\n\n    function updateSelectedAreaIndicator() {\n        selectionIndicator.style.left = selectedArea.x + 'px';\n        selectionIndicator.style.top = selectedArea.y + 'px';\n        selectionIndicator.style.width = selectedArea.width + 'px';\n        selectionIndicator.style.height = selectedArea.height + 'px';\n    }\n}\n\nsetTimeout(function () {\n    renderer.pause();\n    $(container).find('.net-step-btn').removeClass('fa-pause').addClass('fa-play');\n    self.play = false;\n}, 7000);\n","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false},"update":{"code":"this.init(container, input, state, dataHandler, setProperty);","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false}},"options":[],"thumbnail":"./auth/previews/network.svg","preview":"network.svg","id":"Network","loadPreview":true,"hasOptions":false}