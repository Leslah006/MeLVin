{"title":"LineChart","description":"Graphically represents a sequence of values as a line.","className":"LineChart","allowOutConn":true,"allowInConn":true,"outConnections":[{"type":"OPTION_CONNECTION","name":"Option","desc":"List of options","disabled":true,"index":0}],"inConnections":[{"type":"OPTION_CONNECTION","unique":true,"name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"DATA_CONNECTION","unique":true,"index":0,"name":"Tabular data"},{"type":"COLOR_CONNECTION","unique":true,"name":"Series groups","index":0}],"shareSelection":false,"shareData":true,"category":"viz","selectedLibs":["plotly-latest.min.js"],"previewDataFile":"","selectedPreview":"linechart.svg","methods":{"init":{"code":"console.log(\"Linechart\");\nvar self = this;\n\nPlotly.purge(container);\n$(container).html(\"\");\n\nvar options = {\n  scrollZoom: true,\n  showLink: false,\n  modeBarButtonsToRemove: ['sendDataToCloud'],\n  displaylogo: false,\n  displayModeBar: true\n};\n\nvar data = input.data.data;\nvar attributes = input.data.schema.attributes;\nvar allAttributes = Object.keys(attributes).slice();\nvar idIndex = 0;\nvar horizontalAttrName = state.options[0].value;\nvar horizontalAttrIndex = allAttributes.indexOf(horizontalAttrName);\n\nvar seriesAttrsName = state.options[1].value;\nvar seriesAttrsIndex = state.options[1].value.map(function(attr) {\n  return allAttributes.indexOf(attr);\n});\n\n\nvar traces = [];\n\n\nallAttributes.splice(horizontalAttrIndex, 1);\nallAttributes.splice(0, 1);\n\nif (state.options[2].selectedIndex === \"1\") {\n  data.map(function(data) {\n    if (input.groups && input.groups.dataMemb && input.groups.dataMemb[data[0]]) {\n      var currentData = data.slice();\n      currentData.splice(horizontalAttrIndex, 1);\n      currentData.splice(idIndex, 1);\n      traces.push({\n        x: allAttributes,\n        y: currentData,\n        mode: 'lines',\n        name: data[horizontalAttrIndex],\n        line: {\n          shape: 'linear'\n        },\n        type: 'scatter'\n      })\n    }\n  });\n} else {\n  var x = data.map(function(data) {\n    return data[horizontalAttrIndex]\n  });\n\n  var dataSeries = [];\n\n  seriesAttrsIndex.forEach(function(dataIndex) {\n    dataSeries.push(data.map(function(dataItem, i) {\n      return dataItem[dataIndex];\n    }));\n  });\n\n  dataSeries.forEach(function(serie, i) {\n    traces.push({\n      x: x,\n      y: serie,\n      mode: 'lines',\n      name: seriesAttrsName[i],\n      line: {\n        shape: 'linear'\n      },\n      type: 'scatter'\n    })\n  })\n}\n\nvar layout = {\n  margin: {\n    l: 50,\n    r: 30,\n    b: 30,\n    t: 30,\n    pad: 5\n  },\n  autosize: true,\n  dragmode: \"pan\",\n  showlegend: true,\n  legend: {\n    y: 0.5,\n    traceorder: 'reversed',\n    font: {\n      size: 16\n    },\n    yref: 'paper'\n  },\n  xaxis: {\n    showticklabels: false\n  },\n};\n\nPlotly.newPlot(container, traces, layout, options);","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false},"update":{"code":"this.init(container, input, state, dataHandler, setProperty);","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false}},"options":[{"type":"INPUT","label":"Horizontal axis column name","placeholder":"","help":"This column shall contain the name of the break points to be represented in the horizontal axis"},{"type":"INPUT_LIST","label":"Series column names","help":"Name of the columns containing the data to be represented as lines"},{"type":"RADIO_LIST","label":"Data format","values":"Row-wise, Column-wise","help":"Is the data to be represented as lines store in rows or in columns?"},{"type":"CHECKBOX","label":"Show horizontal axis"}],"thumbnail":"./auth/previews/linechart.svg","preview":"linechart.svg","id":"LineChart","loadPreview":true,"hasOptions":true}