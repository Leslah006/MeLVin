{"title":"BoxPlot","description":"BoxPlot","className":"BoxPlot","allowOutConn":true,"allowInConn":true,"outConnections":[{"type":"OPTION_CONNECTION","name":"Option","desc":"List of options","disabled":true,"index":0}],"inConnections":[{"type":"OPTION_CONNECTION","unique":true,"name":"Option","desc":"List of options","disabled":true,"index":0},{"type":"DATA_CONNECTION","unique":true,"name":"Data","desc":"Data","index":0}],"shareSelection":false,"shareData":true,"category":"viz","selectedLibs":["plotly-latest.min.js"],"previewDataFile":"","selectedPreview":"boxChart.svg","methods":{"init":{"code":"Plotly.purge(container);\n$(container).html(\"\");\nvar options = {\n    scrollZoom: true,\n    showLink: false,\n    modeBarButtonsToRemove: ['sendDataToCloud'],\n    displaylogo: false,\n    displayModeBar: true\n};\nconsole.log(\"boxplot\");\n\n\nvar valueAttr = Object.keys(input.data.schema.attributes).indexOf(state.options[0].value);\n\n\nvar incorrectCols = valueAttr === -1;\n\nif (input.data.data.length > 0 && !incorrectCols) {\n    var baseTrace = {\n        y: [],\n        type: 'box',\n        name: \"ungrouped\",\n        marker: {\n            color: \"#000000\"\n        }\n    };\n    input.groups = input.groups || [];\n    var traces = [baseTrace].concat(input.groups.map(function (group) {\n        return {\n            y: [],\n            type: 'box',\n            name: group.name,\n            marker: {\n                color: group.color\n            }\n        };\n    }));\n\n\n    var i = 0;\n    input.data.data.forEach(function (data) {\n        var traceNum = 0;\n        for (i = 0; i < input.groups.length; i++) {\n            if (input.groups[i].points && input.groups[i].points[data[0]]) {\n                traceNum = i + 1;\n            }\n        }\n        traces[traceNum].y.push(data[valueAttr]);\n    });\n\n\n    var layout = {\n        autosize: true,\n        dragmode: \"pan\",\n        yaxis: {\n            title: Object.keys(input.data.schema.attributes)[valueAttr],\n            zeroline: false\n        },\n    };\n\n\n    Plotly.newPlot(container, traces, layout, options);\n} else {\n    var message = \"\";\n    if (input.data.data.length === 0)\n        message = 'No data provieded';\n    else\n        message = 'Specified column names not found in the provided data';\n\n    $(container).html('<div style=\"height:100%;display:flex;flex-flow: column;justify-content:center;align-items:center;\">' +\n        '<div class=\"alert alert-info\" role=\"alert\">' + message +\n        '</div>' +\n        '</div>');\n}","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false},"update":{"code":"this.render(container, state, setProperty);","args":"container, input, state, dataHandler, setProperty","isRemovable":false,"hasCustomArgs":false,"canBeRenamed":false}},"options":[],"thumbnail":"./auth/previews/boxChart.svg","preview":"boxChart.svg","id":"BoxPlot","loadPreview":true,"hasOptions":false}